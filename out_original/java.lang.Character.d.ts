/// <reference path="./_helpers.d.ts" />
/// <reference path="./java.lang.CharSequence.d.ts" />
/// <reference path="./java.lang.Class.d.ts" />
/// <reference path="./java.lang.Object.d.ts" />
/// <reference path="./java.lang.String.d.ts" />

declare module java {
	export module lang {
		export class Character {
			public constructor();
			public constructor(param0: string);
			public charValue(): string;
			public compareTo(param0: java.lang.Character): number;
			public static compare(param0: string, param1: string): number;
			public static valueOf(param0: string): java.lang.Character;
			public static isValidCodePoint(param0: number): boolean;
			public static isSupplementaryCodePoint(param0: number): boolean;
			public static isHighSurrogate(param0: string): boolean;
			public static isLowSurrogate(param0: string): boolean;
			public static isSurrogate(param0: string): boolean;
			public static isSurrogatePair(param0: string, param1: string): boolean;
			public static charCount(param0: number): number;
			public static toCodePoint(param0: string, param1: string): number;
			public static codePointAt(param0: string, param1: number): number;
			public static codePointAt(param0: native.Array<string>, param1: number): number;
			public static codePointAt(param0: native.Array<string>, param1: number, param2: number): number;
			public static codePointBefore(param0: string, param1: number): number;
			public static codePointBefore(param0: native.Array<string>, param1: number): number;
			public static codePointBefore(param0: native.Array<string>, param1: number, param2: number): number;
			public static toChars(param0: number, param1: native.Array<string>, param2: number): number;
			public static toChars(param0: number): native.Array<string>;
			public static codePointCount(param0: string, param1: number, param2: number): number;
			public static codePointCount(param0: native.Array<string>, param1: number, param2: number): number;
			public static offsetByCodePoints(param0: string, param1: number, param2: number): number;
			public static offsetByCodePoints(param0: native.Array<string>, param1: number, param2: number, param3: number, param4: number): number;
			public static digit(param0: string, param1: number): number;
			public static digit(param0: number, param1: number): number;
			public equals(param0: java.lang.Object): boolean;
			public static forDigit(param0: number, param1: number): string;
			public static getName(param0: number): string;
			public static getNumericValue(param0: string): number;
			public static getNumericValue(param0: number): number;
			public static getType(param0: string): number;
			public static getType(param0: number): number;
			public static getDirectionality(param0: string): number;
			public static getDirectionality(param0: number): number;
			public static isMirrored(param0: string): boolean;
			public static isMirrored(param0: number): boolean;
			public hashCode(): number;
			public static highSurrogate(param0: number): string;
			public static lowSurrogate(param0: number): string;
			public static isAlphabetic(param0: number): boolean;
			public static isBmpCodePoint(param0: number): boolean;
			public static isDefined(param0: string): boolean;
			public static isDefined(param0: number): boolean;
			public static isDigit(param0: string): boolean;
			public static isDigit(param0: number): boolean;
			public static isIdentifierIgnorable(param0: string): boolean;
			public static isIdeographic(param0: number): boolean;
			public static isIdentifierIgnorable(param0: number): boolean;
			public static isISOControl(param0: string): boolean;
			public static isISOControl(param0: number): boolean;
			public static isJavaIdentifierPart(param0: string): boolean;
			public static isJavaIdentifierPart(param0: number): boolean;
			public static isJavaIdentifierStart(param0: string): boolean;
			public static isJavaIdentifierStart(param0: number): boolean;
			public static isJavaLetter(param0: string): boolean;
			public static isJavaLetterOrDigit(param0: string): boolean;
			public static isLetter(param0: string): boolean;
			public static isLetter(param0: number): boolean;
			public static isLetterOrDigit(param0: string): boolean;
			public static isLetterOrDigit(param0: number): boolean;
			public static isLowerCase(param0: string): boolean;
			public static isLowerCase(param0: number): boolean;
			public static isSpace(param0: string): boolean;
			public static isSpaceChar(param0: string): boolean;
			public static isSpaceChar(param0: number): boolean;
			public static isTitleCase(param0: string): boolean;
			public static isTitleCase(param0: number): boolean;
			public static isUnicodeIdentifierPart(param0: string): boolean;
			public static isUnicodeIdentifierPart(param0: number): boolean;
			public static isUnicodeIdentifierStart(param0: string): boolean;
			public static isUnicodeIdentifierStart(param0: number): boolean;
			public static isUpperCase(param0: string): boolean;
			public static isUpperCase(param0: number): boolean;
			public static isWhitespace(param0: string): boolean;
			public static isWhitespace(param0: number): boolean;
			public static reverseBytes(param0: string): string;
			public static toLowerCase(param0: string): string;
			public static toLowerCase(param0: number): number;
			public toString(): string;
			public static toString(param0: string): string;
			public static toTitleCase(param0: string): string;
			public static toTitleCase(param0: number): number;
			public static toUpperCase(param0: string): string;
			public static toUpperCase(param0: number): number;
			public static COMBINING_SPACING_MARK: number;
			public static CONNECTOR_PUNCTUATION: number;
			public static CONTROL: number;
			public static CURRENCY_SYMBOL: number;
			public static DASH_PUNCTUATION: number;
			public static DECIMAL_DIGIT_NUMBER: number;
			public static DIRECTIONALITY_ARABIC_NUMBER: number;
			public static DIRECTIONALITY_BOUNDARY_NEUTRAL: number;
			public static DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: number;
			public static DIRECTIONALITY_EUROPEAN_NUMBER: number;
			public static DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: number;
			public static DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: number;
			public static DIRECTIONALITY_LEFT_TO_RIGHT: number;
			public static DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: number;
			public static DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: number;
			public static DIRECTIONALITY_NONSPACING_MARK: number;
			public static DIRECTIONALITY_OTHER_NEUTRALS: number;
			public static DIRECTIONALITY_PARAGRAPH_SEPARATOR: number;
			public static DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: number;
			public static DIRECTIONALITY_RIGHT_TO_LEFT: number;
			public static DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: number;
			public static DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: number;
			public static DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: number;
			public static DIRECTIONALITY_SEGMENT_SEPARATOR: number;
			public static DIRECTIONALITY_UNDEFINED: number;
			public static DIRECTIONALITY_WHITESPACE: number;
			public static ENCLOSING_MARK: number;
			public static END_PUNCTUATION: number;
			public static FINAL_QUOTE_PUNCTUATION: number;
			public static FORMAT: number;
			public static INITIAL_QUOTE_PUNCTUATION: number;
			public static LETTER_NUMBER: number;
			public static LINE_SEPARATOR: number;
			public static LOWERCASE_LETTER: number;
			public static MATH_SYMBOL: number;
			public static MAX_CODE_POINT: number;
			public static MAX_HIGH_SURROGATE: string;
			public static MAX_LOW_SURROGATE: string;
			public static MAX_RADIX: number;
			public static MAX_SURROGATE: string;
			public static MAX_VALUE: string;
			public static MIN_CODE_POINT: number;
			public static MIN_HIGH_SURROGATE: string;
			public static MIN_LOW_SURROGATE: string;
			public static MIN_RADIX: number;
			public static MIN_SUPPLEMENTARY_CODE_POINT: number;
			public static MIN_SURROGATE: string;
			public static MIN_VALUE: string;
			public static MODIFIER_LETTER: number;
			public static MODIFIER_SYMBOL: number;
			public static NON_SPACING_MARK: number;
			public static OTHER_LETTER: number;
			public static OTHER_NUMBER: number;
			public static OTHER_PUNCTUATION: number;
			public static OTHER_SYMBOL: number;
			public static PARAGRAPH_SEPARATOR: number;
			public static PRIVATE_USE: number;
			public static SIZE: number;
			public static SPACE_SEPARATOR: number;
			public static START_PUNCTUATION: number;
			public static SURROGATE: number;
			public static TITLECASE_LETTER: number;
			public static TYPE: java.lang.Class;
			public static UNASSIGNED: number;
			public static UPPERCASE_LETTER: number;
		}
		export module Character {
			export class Subset {
				public constructor();
				public constructor(param0: string);
				public equals(param0: java.lang.Object): boolean;
				public hashCode(): number;
				public toString(): string;
			}
			export class UnicodeBlock {
				public static forName(param0: string): java.lang.Character.UnicodeBlock;
				public static of(param0: string): java.lang.Character.UnicodeBlock;
				public static of(param0: number): java.lang.Character.UnicodeBlock;
				public static AEGEAN_NUMBERS: java.lang.Character.UnicodeBlock;
				public static ALCHEMICAL_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static ALPHABETIC_PRESENTATION_FORMS: java.lang.Character.UnicodeBlock;
				public static ANCIENT_GREEK_MUSICAL_NOTATION: java.lang.Character.UnicodeBlock;
				public static ANCIENT_GREEK_NUMBERS: java.lang.Character.UnicodeBlock;
				public static ANCIENT_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static ARABIC: java.lang.Character.UnicodeBlock;
				public static ARABIC_PRESENTATION_FORMS_A: java.lang.Character.UnicodeBlock;
				public static ARABIC_PRESENTATION_FORMS_B: java.lang.Character.UnicodeBlock;
				public static ARABIC_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static ARMENIAN: java.lang.Character.UnicodeBlock;
				public static ARROWS: java.lang.Character.UnicodeBlock;
				public static AVESTAN: java.lang.Character.UnicodeBlock;
				public static BALINESE: java.lang.Character.UnicodeBlock;
				public static BAMUM: java.lang.Character.UnicodeBlock;
				public static BAMUM_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static BASIC_LATIN: java.lang.Character.UnicodeBlock;
				public static BATAK: java.lang.Character.UnicodeBlock;
				public static BENGALI: java.lang.Character.UnicodeBlock;
				public static BLOCK_ELEMENTS: java.lang.Character.UnicodeBlock;
				public static BOPOMOFO: java.lang.Character.UnicodeBlock;
				public static BOPOMOFO_EXTENDED: java.lang.Character.UnicodeBlock;
				public static BOX_DRAWING: java.lang.Character.UnicodeBlock;
				public static BRAHMI: java.lang.Character.UnicodeBlock;
				public static BRAILLE_PATTERNS: java.lang.Character.UnicodeBlock;
				public static BUGINESE: java.lang.Character.UnicodeBlock;
				public static BUHID: java.lang.Character.UnicodeBlock;
				public static BYZANTINE_MUSICAL_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static CARIAN: java.lang.Character.UnicodeBlock;
				public static CHAM: java.lang.Character.UnicodeBlock;
				public static CHEROKEE: java.lang.Character.UnicodeBlock;
				public static CJK_COMPATIBILITY: java.lang.Character.UnicodeBlock;
				public static CJK_COMPATIBILITY_FORMS: java.lang.Character.UnicodeBlock;
				public static CJK_COMPATIBILITY_IDEOGRAPHS: java.lang.Character.UnicodeBlock;
				public static CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static CJK_RADICALS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static CJK_STROKES: java.lang.Character.UnicodeBlock;
				public static CJK_SYMBOLS_AND_PUNCTUATION: java.lang.Character.UnicodeBlock;
				public static CJK_UNIFIED_IDEOGRAPHS: java.lang.Character.UnicodeBlock;
				public static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A: java.lang.Character.UnicodeBlock;
				public static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B: java.lang.Character.UnicodeBlock;
				public static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C: java.lang.Character.UnicodeBlock;
				public static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D: java.lang.Character.UnicodeBlock;
				public static COMBINING_DIACRITICAL_MARKS: java.lang.Character.UnicodeBlock;
				public static COMBINING_DIACRITICAL_MARKS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static COMBINING_HALF_MARKS: java.lang.Character.UnicodeBlock;
				public static COMBINING_MARKS_FOR_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static COMMON_INDIC_NUMBER_FORMS: java.lang.Character.UnicodeBlock;
				public static CONTROL_PICTURES: java.lang.Character.UnicodeBlock;
				public static COPTIC: java.lang.Character.UnicodeBlock;
				public static COUNTING_ROD_NUMERALS: java.lang.Character.UnicodeBlock;
				public static CUNEIFORM: java.lang.Character.UnicodeBlock;
				public static CUNEIFORM_NUMBERS_AND_PUNCTUATION: java.lang.Character.UnicodeBlock;
				public static CURRENCY_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static CYPRIOT_SYLLABARY: java.lang.Character.UnicodeBlock;
				public static CYRILLIC: java.lang.Character.UnicodeBlock;
				public static CYRILLIC_EXTENDED_A: java.lang.Character.UnicodeBlock;
				public static CYRILLIC_EXTENDED_B: java.lang.Character.UnicodeBlock;
				public static CYRILLIC_SUPPLEMENTARY: java.lang.Character.UnicodeBlock;
				public static DESERET: java.lang.Character.UnicodeBlock;
				public static DEVANAGARI: java.lang.Character.UnicodeBlock;
				public static DEVANAGARI_EXTENDED: java.lang.Character.UnicodeBlock;
				public static DINGBATS: java.lang.Character.UnicodeBlock;
				public static DOMINO_TILES: java.lang.Character.UnicodeBlock;
				public static EGYPTIAN_HIEROGLYPHS: java.lang.Character.UnicodeBlock;
				public static EMOTICONS: java.lang.Character.UnicodeBlock;
				public static ENCLOSED_ALPHANUMERICS: java.lang.Character.UnicodeBlock;
				public static ENCLOSED_ALPHANUMERIC_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static ENCLOSED_CJK_LETTERS_AND_MONTHS: java.lang.Character.UnicodeBlock;
				public static ENCLOSED_IDEOGRAPHIC_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static ETHIOPIC: java.lang.Character.UnicodeBlock;
				public static ETHIOPIC_EXTENDED: java.lang.Character.UnicodeBlock;
				public static ETHIOPIC_EXTENDED_A: java.lang.Character.UnicodeBlock;
				public static ETHIOPIC_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static GENERAL_PUNCTUATION: java.lang.Character.UnicodeBlock;
				public static GEOMETRIC_SHAPES: java.lang.Character.UnicodeBlock;
				public static GEORGIAN: java.lang.Character.UnicodeBlock;
				public static GEORGIAN_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static GLAGOLITIC: java.lang.Character.UnicodeBlock;
				public static GOTHIC: java.lang.Character.UnicodeBlock;
				public static GREEK: java.lang.Character.UnicodeBlock;
				public static GREEK_EXTENDED: java.lang.Character.UnicodeBlock;
				public static GUJARATI: java.lang.Character.UnicodeBlock;
				public static GURMUKHI: java.lang.Character.UnicodeBlock;
				public static HALFWIDTH_AND_FULLWIDTH_FORMS: java.lang.Character.UnicodeBlock;
				public static HANGUL_COMPATIBILITY_JAMO: java.lang.Character.UnicodeBlock;
				public static HANGUL_JAMO: java.lang.Character.UnicodeBlock;
				public static HANGUL_JAMO_EXTENDED_A: java.lang.Character.UnicodeBlock;
				public static HANGUL_JAMO_EXTENDED_B: java.lang.Character.UnicodeBlock;
				public static HANGUL_SYLLABLES: java.lang.Character.UnicodeBlock;
				public static HANUNOO: java.lang.Character.UnicodeBlock;
				public static HEBREW: java.lang.Character.UnicodeBlock;
				public static HIGH_PRIVATE_USE_SURROGATES: java.lang.Character.UnicodeBlock;
				public static HIGH_SURROGATES: java.lang.Character.UnicodeBlock;
				public static HIRAGANA: java.lang.Character.UnicodeBlock;
				public static IDEOGRAPHIC_DESCRIPTION_CHARACTERS: java.lang.Character.UnicodeBlock;
				public static IMPERIAL_ARAMAIC: java.lang.Character.UnicodeBlock;
				public static INSCRIPTIONAL_PAHLAVI: java.lang.Character.UnicodeBlock;
				public static INSCRIPTIONAL_PARTHIAN: java.lang.Character.UnicodeBlock;
				public static IPA_EXTENSIONS: java.lang.Character.UnicodeBlock;
				public static JAVANESE: java.lang.Character.UnicodeBlock;
				public static KAITHI: java.lang.Character.UnicodeBlock;
				public static KANA_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static KANBUN: java.lang.Character.UnicodeBlock;
				public static KANGXI_RADICALS: java.lang.Character.UnicodeBlock;
				public static KANNADA: java.lang.Character.UnicodeBlock;
				public static KATAKANA: java.lang.Character.UnicodeBlock;
				public static KATAKANA_PHONETIC_EXTENSIONS: java.lang.Character.UnicodeBlock;
				public static KAYAH_LI: java.lang.Character.UnicodeBlock;
				public static KHAROSHTHI: java.lang.Character.UnicodeBlock;
				public static KHMER: java.lang.Character.UnicodeBlock;
				public static KHMER_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static LAO: java.lang.Character.UnicodeBlock;
				public static LATIN_1_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static LATIN_EXTENDED_A: java.lang.Character.UnicodeBlock;
				public static LATIN_EXTENDED_ADDITIONAL: java.lang.Character.UnicodeBlock;
				public static LATIN_EXTENDED_B: java.lang.Character.UnicodeBlock;
				public static LATIN_EXTENDED_C: java.lang.Character.UnicodeBlock;
				public static LATIN_EXTENDED_D: java.lang.Character.UnicodeBlock;
				public static LEPCHA: java.lang.Character.UnicodeBlock;
				public static LETTERLIKE_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static LIMBU: java.lang.Character.UnicodeBlock;
				public static LINEAR_B_IDEOGRAMS: java.lang.Character.UnicodeBlock;
				public static LINEAR_B_SYLLABARY: java.lang.Character.UnicodeBlock;
				public static LISU: java.lang.Character.UnicodeBlock;
				public static LOW_SURROGATES: java.lang.Character.UnicodeBlock;
				public static LYCIAN: java.lang.Character.UnicodeBlock;
				public static LYDIAN: java.lang.Character.UnicodeBlock;
				public static MAHJONG_TILES: java.lang.Character.UnicodeBlock;
				public static MALAYALAM: java.lang.Character.UnicodeBlock;
				public static MANDAIC: java.lang.Character.UnicodeBlock;
				public static MATHEMATICAL_ALPHANUMERIC_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static MATHEMATICAL_OPERATORS: java.lang.Character.UnicodeBlock;
				public static MEETEI_MAYEK: java.lang.Character.UnicodeBlock;
				public static MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A: java.lang.Character.UnicodeBlock;
				public static MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B: java.lang.Character.UnicodeBlock;
				public static MISCELLANEOUS_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static MISCELLANEOUS_SYMBOLS_AND_ARROWS: java.lang.Character.UnicodeBlock;
				public static MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS: java.lang.Character.UnicodeBlock;
				public static MISCELLANEOUS_TECHNICAL: java.lang.Character.UnicodeBlock;
				public static MODIFIER_TONE_LETTERS: java.lang.Character.UnicodeBlock;
				public static MONGOLIAN: java.lang.Character.UnicodeBlock;
				public static MUSICAL_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static MYANMAR: java.lang.Character.UnicodeBlock;
				public static MYANMAR_EXTENDED_A: java.lang.Character.UnicodeBlock;
				public static NEW_TAI_LUE: java.lang.Character.UnicodeBlock;
				public static NKO: java.lang.Character.UnicodeBlock;
				public static NUMBER_FORMS: java.lang.Character.UnicodeBlock;
				public static OGHAM: java.lang.Character.UnicodeBlock;
				public static OLD_ITALIC: java.lang.Character.UnicodeBlock;
				public static OLD_PERSIAN: java.lang.Character.UnicodeBlock;
				public static OLD_SOUTH_ARABIAN: java.lang.Character.UnicodeBlock;
				public static OLD_TURKIC: java.lang.Character.UnicodeBlock;
				public static OL_CHIKI: java.lang.Character.UnicodeBlock;
				public static OPTICAL_CHARACTER_RECOGNITION: java.lang.Character.UnicodeBlock;
				public static ORIYA: java.lang.Character.UnicodeBlock;
				public static OSMANYA: java.lang.Character.UnicodeBlock;
				public static PHAGS_PA: java.lang.Character.UnicodeBlock;
				public static PHAISTOS_DISC: java.lang.Character.UnicodeBlock;
				public static PHOENICIAN: java.lang.Character.UnicodeBlock;
				public static PHONETIC_EXTENSIONS: java.lang.Character.UnicodeBlock;
				public static PHONETIC_EXTENSIONS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static PLAYING_CARDS: java.lang.Character.UnicodeBlock;
				public static PRIVATE_USE_AREA: java.lang.Character.UnicodeBlock;
				public static REJANG: java.lang.Character.UnicodeBlock;
				public static RUMI_NUMERAL_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static RUNIC: java.lang.Character.UnicodeBlock;
				public static SAMARITAN: java.lang.Character.UnicodeBlock;
				public static SAURASHTRA: java.lang.Character.UnicodeBlock;
				public static SHAVIAN: java.lang.Character.UnicodeBlock;
				public static SINHALA: java.lang.Character.UnicodeBlock;
				public static SMALL_FORM_VARIANTS: java.lang.Character.UnicodeBlock;
				public static SPACING_MODIFIER_LETTERS: java.lang.Character.UnicodeBlock;
				public static SPECIALS: java.lang.Character.UnicodeBlock;
				public static SUNDANESE: java.lang.Character.UnicodeBlock;
				public static SUPERSCRIPTS_AND_SUBSCRIPTS: java.lang.Character.UnicodeBlock;
				public static SUPPLEMENTAL_ARROWS_A: java.lang.Character.UnicodeBlock;
				public static SUPPLEMENTAL_ARROWS_B: java.lang.Character.UnicodeBlock;
				public static SUPPLEMENTAL_MATHEMATICAL_OPERATORS: java.lang.Character.UnicodeBlock;
				public static SUPPLEMENTAL_PUNCTUATION: java.lang.Character.UnicodeBlock;
				public static SUPPLEMENTARY_PRIVATE_USE_AREA_A: java.lang.Character.UnicodeBlock;
				public static SUPPLEMENTARY_PRIVATE_USE_AREA_B: java.lang.Character.UnicodeBlock;
				public static SURROGATES_AREA: java.lang.Character.UnicodeBlock;
				public static SYLOTI_NAGRI: java.lang.Character.UnicodeBlock;
				public static SYRIAC: java.lang.Character.UnicodeBlock;
				public static TAGALOG: java.lang.Character.UnicodeBlock;
				public static TAGBANWA: java.lang.Character.UnicodeBlock;
				public static TAGS: java.lang.Character.UnicodeBlock;
				public static TAI_LE: java.lang.Character.UnicodeBlock;
				public static TAI_THAM: java.lang.Character.UnicodeBlock;
				public static TAI_VIET: java.lang.Character.UnicodeBlock;
				public static TAI_XUAN_JING_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static TAMIL: java.lang.Character.UnicodeBlock;
				public static TELUGU: java.lang.Character.UnicodeBlock;
				public static THAANA: java.lang.Character.UnicodeBlock;
				public static THAI: java.lang.Character.UnicodeBlock;
				public static TIBETAN: java.lang.Character.UnicodeBlock;
				public static TIFINAGH: java.lang.Character.UnicodeBlock;
				public static TRANSPORT_AND_MAP_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static UGARITIC: java.lang.Character.UnicodeBlock;
				public static UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS: java.lang.Character.UnicodeBlock;
				public static UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED: java.lang.Character.UnicodeBlock;
				public static VAI: java.lang.Character.UnicodeBlock;
				public static VARIATION_SELECTORS: java.lang.Character.UnicodeBlock;
				public static VARIATION_SELECTORS_SUPPLEMENT: java.lang.Character.UnicodeBlock;
				public static VEDIC_EXTENSIONS: java.lang.Character.UnicodeBlock;
				public static VERTICAL_FORMS: java.lang.Character.UnicodeBlock;
				public static YIJING_HEXAGRAM_SYMBOLS: java.lang.Character.UnicodeBlock;
				public static YI_RADICALS: java.lang.Character.UnicodeBlock;
				public static YI_SYLLABLES: java.lang.Character.UnicodeBlock;
			}
		}
	}
}
