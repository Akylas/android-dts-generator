/// <reference path="./_helpers.d.ts" />
/// <reference path="./java.lang.String.d.ts" />
/// <reference path="./java.sql.Connection.d.ts" />
/// <reference path="./java.sql.ResultSet.d.ts" />
/// <reference path="./java.sql.RowIdLifetime.d.ts" />

declare module java {
	export module sql {
		export class DatabaseMetaData {
			public allProceduresAreCallable(): boolean;
			public allTablesAreSelectable(): boolean;
			public dataDefinitionCausesTransactionCommit(): boolean;
			public dataDefinitionIgnoredInTransactions(): boolean;
			public deletesAreDetected(param0: number): boolean;
			public doesMaxRowSizeIncludeBlobs(): boolean;
			public getAttributes(param0: string, param1: string, param2: string, param3: string): java.sql.ResultSet;
			public getBestRowIdentifier(param0: string, param1: string, param2: string, param3: number, param4: boolean): java.sql.ResultSet;
			public getCatalogs(): java.sql.ResultSet;
			public getCatalogSeparator(): string;
			public getCatalogTerm(): string;
			public getColumnPrivileges(param0: string, param1: string, param2: string, param3: string): java.sql.ResultSet;
			public getColumns(param0: string, param1: string, param2: string, param3: string): java.sql.ResultSet;
			public getConnection(): java.sql.Connection;
			public getCrossReference(param0: string, param1: string, param2: string, param3: string, param4: string, param5: string): java.sql.ResultSet;
			public getDatabaseMajorVersion(): number;
			public getDatabaseMinorVersion(): number;
			public getDatabaseProductName(): string;
			public getDatabaseProductVersion(): string;
			public getDefaultTransactionIsolation(): number;
			public getDriverMajorVersion(): number;
			public getDriverMinorVersion(): number;
			public getDriverName(): string;
			public getDriverVersion(): string;
			public getExportedKeys(param0: string, param1: string, param2: string): java.sql.ResultSet;
			public getExtraNameCharacters(): string;
			public getIdentifierQuoteString(): string;
			public getImportedKeys(param0: string, param1: string, param2: string): java.sql.ResultSet;
			public getIndexInfo(param0: string, param1: string, param2: string, param3: boolean, param4: boolean): java.sql.ResultSet;
			public getJDBCMajorVersion(): number;
			public getJDBCMinorVersion(): number;
			public getMaxBinaryLiteralLength(): number;
			public getMaxCatalogNameLength(): number;
			public getMaxCharLiteralLength(): number;
			public getMaxColumnNameLength(): number;
			public getMaxColumnsInGroupBy(): number;
			public getMaxColumnsInIndex(): number;
			public getMaxColumnsInOrderBy(): number;
			public getMaxColumnsInSelect(): number;
			public getMaxColumnsInTable(): number;
			public getMaxConnections(): number;
			public getMaxCursorNameLength(): number;
			public getMaxIndexLength(): number;
			public getMaxProcedureNameLength(): number;
			public getMaxRowSize(): number;
			public getMaxSchemaNameLength(): number;
			public getMaxStatementLength(): number;
			public getMaxStatements(): number;
			public getMaxTableNameLength(): number;
			public getMaxTablesInSelect(): number;
			public getMaxUserNameLength(): number;
			public getNumericFunctions(): string;
			public getPrimaryKeys(param0: string, param1: string, param2: string): java.sql.ResultSet;
			public getProcedureColumns(param0: string, param1: string, param2: string, param3: string): java.sql.ResultSet;
			public getProcedures(param0: string, param1: string, param2: string): java.sql.ResultSet;
			public getProcedureTerm(): string;
			public getResultSetHoldability(): number;
			public getSchemas(): java.sql.ResultSet;
			public getSchemaTerm(): string;
			public getSearchStringEscape(): string;
			public getSQLKeywords(): string;
			public getSQLStateType(): number;
			public getStringFunctions(): string;
			public getSuperTables(param0: string, param1: string, param2: string): java.sql.ResultSet;
			public getSuperTypes(param0: string, param1: string, param2: string): java.sql.ResultSet;
			public getSystemFunctions(): string;
			public getTablePrivileges(param0: string, param1: string, param2: string): java.sql.ResultSet;
			public getTables(param0: string, param1: string, param2: string, param3: native.Array<string>): java.sql.ResultSet;
			public getTableTypes(): java.sql.ResultSet;
			public getTimeDateFunctions(): string;
			public getTypeInfo(): java.sql.ResultSet;
			public getUDTs(param0: string, param1: string, param2: string, param3: native.Array<number>): java.sql.ResultSet;
			public getURL(): string;
			public getUserName(): string;
			public getVersionColumns(param0: string, param1: string, param2: string): java.sql.ResultSet;
			public insertsAreDetected(param0: number): boolean;
			public isCatalogAtStart(): boolean;
			public isReadOnly(): boolean;
			public locatorsUpdateCopy(): boolean;
			public nullPlusNonNullIsNull(): boolean;
			public nullsAreSortedAtEnd(): boolean;
			public nullsAreSortedAtStart(): boolean;
			public nullsAreSortedHigh(): boolean;
			public nullsAreSortedLow(): boolean;
			public othersDeletesAreVisible(param0: number): boolean;
			public othersInsertsAreVisible(param0: number): boolean;
			public othersUpdatesAreVisible(param0: number): boolean;
			public ownDeletesAreVisible(param0: number): boolean;
			public ownInsertsAreVisible(param0: number): boolean;
			public ownUpdatesAreVisible(param0: number): boolean;
			public storesLowerCaseIdentifiers(): boolean;
			public storesLowerCaseQuotedIdentifiers(): boolean;
			public storesMixedCaseIdentifiers(): boolean;
			public storesMixedCaseQuotedIdentifiers(): boolean;
			public storesUpperCaseIdentifiers(): boolean;
			public storesUpperCaseQuotedIdentifiers(): boolean;
			public supportsAlterTableWithAddColumn(): boolean;
			public supportsAlterTableWithDropColumn(): boolean;
			public supportsANSI92EntryLevelSQL(): boolean;
			public supportsANSI92FullSQL(): boolean;
			public supportsANSI92IntermediateSQL(): boolean;
			public supportsBatchUpdates(): boolean;
			public supportsCatalogsInDataManipulation(): boolean;
			public supportsCatalogsInIndexDefinitions(): boolean;
			public supportsCatalogsInPrivilegeDefinitions(): boolean;
			public supportsCatalogsInProcedureCalls(): boolean;
			public supportsCatalogsInTableDefinitions(): boolean;
			public supportsColumnAliasing(): boolean;
			public supportsConvert(): boolean;
			public supportsConvert(param0: number, param1: number): boolean;
			public supportsCoreSQLGrammar(): boolean;
			public supportsCorrelatedSubqueries(): boolean;
			public supportsDataDefinitionAndDataManipulationTransactions(): boolean;
			public supportsDataManipulationTransactionsOnly(): boolean;
			public supportsDifferentTableCorrelationNames(): boolean;
			public supportsExpressionsInOrderBy(): boolean;
			public supportsExtendedSQLGrammar(): boolean;
			public supportsFullOuterJoins(): boolean;
			public supportsGetGeneratedKeys(): boolean;
			public supportsGroupBy(): boolean;
			public supportsGroupByBeyondSelect(): boolean;
			public supportsGroupByUnrelated(): boolean;
			public supportsIntegrityEnhancementFacility(): boolean;
			public supportsLikeEscapeClause(): boolean;
			public supportsLimitedOuterJoins(): boolean;
			public supportsMinimumSQLGrammar(): boolean;
			public supportsMixedCaseIdentifiers(): boolean;
			public supportsMixedCaseQuotedIdentifiers(): boolean;
			public supportsMultipleOpenResults(): boolean;
			public supportsMultipleResultSets(): boolean;
			public supportsMultipleTransactions(): boolean;
			public supportsNamedParameters(): boolean;
			public supportsNonNullableColumns(): boolean;
			public supportsOpenCursorsAcrossCommit(): boolean;
			public supportsOpenCursorsAcrossRollback(): boolean;
			public supportsOpenStatementsAcrossCommit(): boolean;
			public supportsOpenStatementsAcrossRollback(): boolean;
			public supportsOrderByUnrelated(): boolean;
			public supportsOuterJoins(): boolean;
			public supportsPositionedDelete(): boolean;
			public supportsPositionedUpdate(): boolean;
			public supportsResultSetConcurrency(param0: number, param1: number): boolean;
			public supportsResultSetHoldability(param0: number): boolean;
			public supportsResultSetType(param0: number): boolean;
			public supportsSavepoints(): boolean;
			public supportsSchemasInDataManipulation(): boolean;
			public supportsSchemasInIndexDefinitions(): boolean;
			public supportsSchemasInPrivilegeDefinitions(): boolean;
			public supportsSchemasInProcedureCalls(): boolean;
			public supportsSchemasInTableDefinitions(): boolean;
			public supportsSelectForUpdate(): boolean;
			public supportsStatementPooling(): boolean;
			public supportsStoredProcedures(): boolean;
			public supportsSubqueriesInComparisons(): boolean;
			public supportsSubqueriesInExists(): boolean;
			public supportsSubqueriesInIns(): boolean;
			public supportsSubqueriesInQuantifieds(): boolean;
			public supportsTableCorrelationNames(): boolean;
			public supportsTransactionIsolationLevel(param0: number): boolean;
			public supportsTransactions(): boolean;
			public supportsUnion(): boolean;
			public supportsUnionAll(): boolean;
			public updatesAreDetected(param0: number): boolean;
			public usesLocalFilePerTable(): boolean;
			public usesLocalFiles(): boolean;
			public autoCommitFailureClosesAllResultSets(): boolean;
			public getClientInfoProperties(): java.sql.ResultSet;
			public getFunctionColumns(param0: string, param1: string, param2: string, param3: string): java.sql.ResultSet;
			public getFunctions(param0: string, param1: string, param2: string): java.sql.ResultSet;
			public getRowIdLifetime(): java.sql.RowIdLifetime;
			public getSchemas(param0: string, param1: string): java.sql.ResultSet;
			public supportsStoredFunctionsUsingCallSyntax(): boolean;
			public static attributeNoNulls: number;
			public static attributeNullable: number;
			public static attributeNullableUnknown: number;
			public static bestRowNotPseudo: number;
			public static bestRowPseudo: number;
			public static bestRowSession: number;
			public static bestRowTemporary: number;
			public static bestRowTransaction: number;
			public static bestRowUnknown: number;
			public static columnNoNulls: number;
			public static columnNullable: number;
			public static columnNullableUnknown: number;
			public static functionColumnIn: number;
			public static functionColumnInOut: number;
			public static functionColumnOut: number;
			public static functionColumnResult: number;
			public static functionColumnUnknown: number;
			public static functionNoNulls: number;
			public static functionNoTable: number;
			public static functionNullable: number;
			public static functionNullableUnknown: number;
			public static functionResultUnknown: number;
			public static functionReturn: number;
			public static functionReturnsTable: number;
			public static importedKeyCascade: number;
			public static importedKeyInitiallyDeferred: number;
			public static importedKeyInitiallyImmediate: number;
			public static importedKeyNoAction: number;
			public static importedKeyNotDeferrable: number;
			public static importedKeyRestrict: number;
			public static importedKeySetDefault: number;
			public static importedKeySetNull: number;
			public static procedureColumnIn: number;
			public static procedureColumnInOut: number;
			public static procedureColumnOut: number;
			public static procedureColumnResult: number;
			public static procedureColumnReturn: number;
			public static procedureColumnUnknown: number;
			public static procedureNoNulls: number;
			public static procedureNoResult: number;
			public static procedureNullable: number;
			public static procedureNullableUnknown: number;
			public static procedureResultUnknown: number;
			public static procedureReturnsResult: number;
			public static sqlStateSQL: number;
			public static sqlStateSQL99: number;
			public static sqlStateXOpen: number;
			public static tableIndexClustered: number;
			public static tableIndexHashed: number;
			public static tableIndexOther: number;
			public static tableIndexStatistic: number;
			public static typeNoNulls: number;
			public static typeNullable: number;
			public static typeNullableUnknown: number;
			public static typePredBasic: number;
			public static typePredChar: number;
			public static typePredNone: number;
			public static typeSearchable: number;
			public static versionColumnNotPseudo: number;
			public static versionColumnPseudo: number;
			public static versionColumnUnknown: number;
		}
	}
}
